%% --- Initialize Workspace --------------------------------------------------------------

% clear workspace
clearvars; 
close all force; 
clc;

% set path
restoredefaultpath; 
addpath(genpath(pwd));

% grab plotting colors
h = plot(randn(7));
plotColors = zeros(7,3)./0;
for i = 1:7
    plotColors(i,:) = h(i).Color;
end
close all;

% number of available GPUs
delete(gcp('nocreate'));
parpool('local',10);

%% --- Experiment Setup ------------------------------------------------------------------

% # random restarts
nReps = 1;

% # data splits
nKfold = 5;

% minimum series length for training
MinSeriesLength = 365*25;

% maximum number of memory states
nStates = unique(round(logspace(0,2.699,25)));
% % nStates = round(linspace(1,250,10));
% % nStates = round([1:9,logspace(1,2.4,20)])
% nStates = 1:5:25;
nModels = length(nStates);

% lstm config
LSTMtrainParms.epochs               = 1e1;
LSTMtrainParms.miniBatchSize        = nKfold-1; 
% LSTMtrainParms.lstmNodeSize         = 10;
LSTMtrainParms.numResponses         = 1;
LSTMtrainParms.dropoutRate          = 0.0;
LSTMtrainParms.initialLearnRate     = 0.01;
LSTMtrainParms.valFraction          = 1/(nKfold-1);
LSTMtrainParms.learnRateDropFactor  = 0;
LSTMtrainParms.learnRateDropPeriod  = 1e3;

% number of mutual information bins
nBins = 25;

%% --- Load & Prepare Data ---------------------------------------------------------------

% screen report
tic; fprintf('Loading and preparing data ...');

% --- load data -----------------------------------------------------------

% load the raw data file
fname = 'extracted_data_v2.mat';
load(fname);

% remove basins with missing attributes
im = find(any(isnan(data.att')));
data.att(im,:)   = [];
data.obs(:,im)   = [];
data.met(:,:,im) = [];
data.mod(:,im)   = [];

% dimensions
[nBasins,dAtt]   = size(data.att);
[nTimes,dMet,nb] = size(data.met); assert(nb == nBasins);
[nt,nb]          = size(data.obs); assert(nb == nBasins); assert(nt == nTimes);
[nt,nb]          = size(data.mod); assert(nb == nBasins); assert(nt == nTimes);

% --- standardize inputs and targets --------------------------------------

% standardize met forcings
forcings = zeros(nTimes,dMet,nBasins)./0;
for m = 1:dMet
    mData = data.met(:,m,:);
    mu = nanmean(mData(:));
    sg = nanstd(mData(:));
    if sg > 0
        forcings(:,m,:) = (data.met(:,m,:) - mu)./sg;
    else
        forcings(:,m,:) = data.met(:,m,:);
    end
end
        
% standardize attribute data
attributes = zeros(nBasins,dAtt)./0;
for a = 1:size(data.att,2)
    mu = mean(data.att(:,a));
    sg = std(data.att(:,a));
    attributes(:,a) = (data.att(:,a) - mu)./sg;
end

% transform obs streamflow
usgsobs = log(data.obs+1);

% transform modeled streamflow
modhat = log(data.mod+1);

% screen report
fprintf('. finished; t = %f[s] \n',toc); 
fprintf('There are %d basins with good data. \n',nBasins);

%% --- Prepare K-Fold Data ---------------------------------------------------------------

% screen report
tic; fprintf('Partitioning k-fold data splits ...');

% init storage
iK = cell(nBasins,nKfold);
inputs = cell(nBasins,nKfold);
targets = cell(nBasins,nKfold);

% number of basins without enough data
nBad = 0;
iBad = zeros(nBasins,1);

% loop through basins to partition data
for b = 1:nBasins

    % pull unbroken observation series
    iSeries = find_longest_series(usgsobs(:,b)',MinSeriesLength);
    if length(iSeries) < MinSeriesLength; nBad = nBad+1; iBad(b) = 1; continue; end
    tSeries = length(iSeries);

    % number of samples per split
    nk = floor(tSeries/nKfold);
    rk = rem(tSeries,nk);
    nk = repmat(nk,[1,nKfold]);
    nk(1:rk) = nk(1:rk) + 1;

    % data series
    ics = [0;cumsum(nk')];
    for k = 1:nKfold
        iK{b,k} = iSeries(ics(k)+1:ics(k+1));
        inputs{b,k} = forcings(iK{b,k},:,b)';
        targets{b,k} = usgsobs(iK{b,k},b)';
    end % k-loop
  
end % b-loop

% screen report
fprintf('. finished; t = %f[s] \n',toc); 

%% --- Train Models ----------------------------------------------------------------------

% screen report
tTrain = tic; fprintf('Training models at each site ... \n');

% init prediction/model storage
Yhat        = cell(nBasins,nModels,nKfold,nReps);
lstmModel   = cell(nBasins,nModels,nKfold,nReps);

% init stats storage
statsNSE    = zeros(nBasins,nModels,nKfold,nReps)./0;
statsMI     = zeros(nBasins,nModels,nKfold,nReps)./0;

% train models at each basin 
parfor b = 1:nBasins

    % skip bad basin
    if iBad(b); continue; end

    % screen report
    tBasin = tic;
    fprintf('--- Basin %d of %d ...',b,nBasins);

    % loop through model sizes
    for m = 1:nModels

       % kfold train/test loop
       for k = 1:nKfold

          % train/test split
          kTrain = 1:nKfold;
          kTrain(k) = [];

          % loop through random restarts
          for r = 1:nReps

             % train model
             lstmModel{b,m,k,r} = trainLSTM_cpu(inputs(b,kTrain),targets(b,kTrain),LSTMtrainParms,nStates(m));

             % test predictions
             Yhat(b,m,k,r) = predict(lstmModel{b,m,k,r},inputs(b,k))';
             statsNSE(b,m,k,r) = nse(Yhat{b,m,k,r}',targets{b,k}');
             statsMI(b,m,k,r)  = mutual_info(Yhat{b,m,k,r}',targets{b,k}',nBins);

          end % r-loop
       end % k-loop
    end % m-loop

    % screen report
    fprintf('. finished; Time = %f[s] \n',toc(tBasin));

end % b-loop

% screen report
fprintf('Finished training all models; Time = %f[s].\n',toc(tTrain));    

%% --- Save Progress ---------------------------------------------------------------------

% screen report
tic; fprintf('Saving progress ...');

% save only trained models
fname = './results/trained_dimension_models_cpu.mat';
save(fname,'lstmMmodel');

% save only perforance stats
fname = './results/test_dimension_stats_cpu.mat';
save(fname,'stats');

% screen report
fprintf('. finished; t = %f[s] \n',toc); 

%% --- End Script ------------------------------------------------------------------------





